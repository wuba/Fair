// This file is generated by Fair, do not edit manually!

import 'package:flutter/material.dart';
import 'utils.dart';

var p = () => {
      'AnimationBehavior': {
        'values': AnimationBehavior.values,
        'normal': AnimationBehavior.normal,
        'preserve': AnimationBehavior.preserve,
      },
      'CatmullRomCurve.validateControlPoints': (props) =>
          CatmullRomCurve.validateControlPoints(
            props['pa'][0],
            tension: props['tension']?.toDouble() ?? 0.0,
            reasons: as(props['reasons']),
          ),
      'Curves': {
        'linear': Curves.linear,
        'decelerate': Curves.decelerate,
        'fastLinearToSlowEaseIn': Curves.fastLinearToSlowEaseIn,
        'ease': Curves.ease,
        'easeIn': Curves.easeIn,
        'easeInToLinear': Curves.easeInToLinear,
        'easeInSine': Curves.easeInSine,
        'easeInQuad': Curves.easeInQuad,
        'easeInCubic': Curves.easeInCubic,
        'easeInQuart': Curves.easeInQuart,
        'easeInQuint': Curves.easeInQuint,
        'easeInExpo': Curves.easeInExpo,
        'easeInCirc': Curves.easeInCirc,
        'easeInBack': Curves.easeInBack,
        'easeOut': Curves.easeOut,
        'linearToEaseOut': Curves.linearToEaseOut,
        'easeOutSine': Curves.easeOutSine,
        'easeOutQuad': Curves.easeOutQuad,
        'easeOutCubic': Curves.easeOutCubic,
        'easeOutQuart': Curves.easeOutQuart,
        'easeOutQuint': Curves.easeOutQuint,
        'easeOutExpo': Curves.easeOutExpo,
        'easeOutCirc': Curves.easeOutCirc,
        'easeOutBack': Curves.easeOutBack,
        'easeInOut': Curves.easeInOut,
        'easeInOutSine': Curves.easeInOutSine,
        'easeInOutQuad': Curves.easeInOutQuad,
        'easeInOutCubic': Curves.easeInOutCubic,
        'easeInOutCubicEmphasized': Curves.easeInOutCubicEmphasized,
        'easeInOutQuart': Curves.easeInOutQuart,
        'easeInOutQuint': Curves.easeInOutQuint,
        'easeInOutExpo': Curves.easeInOutExpo,
        'easeInOutCirc': Curves.easeInOutCirc,
        'easeInOutBack': Curves.easeInOutBack,
        'fastOutSlowIn': Curves.fastOutSlowIn,
        'slowMiddle': Curves.slowMiddle,
        'bounceIn': Curves.bounceIn,
        'bounceOut': Curves.bounceOut,
        'bounceInOut': Curves.bounceInOut,
        'elasticIn': Curves.elasticIn,
        'elasticOut': Curves.elasticOut,
        'elasticInOut': Curves.elasticInOut,
      },
      'AnimationStatus': {
        'values': AnimationStatus.values,
        'dismissed': AnimationStatus.dismissed,
        'forward': AnimationStatus.forward,
        'reverse': AnimationStatus.reverse,
        'completed': AnimationStatus.completed,
      },
  'FontWeight': {
    'w100': FontWeight.w100,
    'w200': FontWeight.w200,
    'w300': FontWeight.w300,
    'w400': FontWeight.w400,
    'w500': FontWeight.w500,
    'w600': FontWeight.w600,
    'w700': FontWeight.w700,
    'w800': FontWeight.w800,
    'w900': FontWeight.w900,
    'normal': FontWeight.normal,
    'bold': FontWeight.bold,
    'values': FontWeight.values,
  },
  'FontWeight.lerp': (props) => FontWeight.lerp(
    props['pa'][0],
    props['pa'][1],
    props['pa'][2]?.toDouble(),
  ),
  'TextDecoration': {
    'none': TextDecoration.none,
    'underline': TextDecoration.underline,
    'overline': TextDecoration.overline,
    'lineThrough': TextDecoration.lineThrough,
  },
  'TextRange': {
    'empty': TextRange.empty,
  },
  'FontStyle': {
    'values': FontStyle.values,
    'normal': FontStyle.normal,
    'italic': FontStyle.italic,
  },
  'TextAlign': {
    'values': TextAlign.values,
    'left': TextAlign.left,
    'right': TextAlign.right,
    'center': TextAlign.center,
    'justify': TextAlign.justify,
    'start': TextAlign.start,
    'end': TextAlign.end,
  },
  'TextBaseline': {
    'values': TextBaseline.values,
    'alphabetic': TextBaseline.alphabetic,
    'ideographic': TextBaseline.ideographic,
  },
  'TextDecorationStyle': {
    'values': TextDecorationStyle.values,
    'solid': TextDecorationStyle.solid,
    'double': TextDecorationStyle.double,
    'dotted': TextDecorationStyle.dotted,
    'dashed': TextDecorationStyle.dashed,
    'wavy': TextDecorationStyle.wavy,
  },
  'TextDirection': {
    'values': TextDirection.values,
    'rtl': TextDirection.rtl,
    'ltr': TextDirection.ltr,
  },
  'TextAffinity': {
    'values': TextAffinity.values,
    'upstream': TextAffinity.upstream,
    'downstream': TextAffinity.downstream,
  },
  'PlaceholderAlignment': {
    'values': PlaceholderAlignment.values,
    'baseline': PlaceholderAlignment.baseline,
    'aboveBaseline': PlaceholderAlignment.aboveBaseline,
    'belowBaseline': PlaceholderAlignment.belowBaseline,
    'top': PlaceholderAlignment.top,
    'bottom': PlaceholderAlignment.bottom,
    'middle': PlaceholderAlignment.middle,
  },
    };
