// This file is generated by Fair, do not edit manually!

import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';

var p = () => {
      'BoxConstraints.lerp': (props) => BoxConstraints.lerp(
            props['pa'][0],
            props['pa'][1],
            props['pa'][2]?.toDouble(),
          ),
      'WrapAlignment': {
        'values': WrapAlignment.values,
        'start': WrapAlignment.start,
        'end': WrapAlignment.end,
        'center': WrapAlignment.center,
        'spaceBetween': WrapAlignment.spaceBetween,
        'spaceAround': WrapAlignment.spaceAround,
        'spaceEvenly': WrapAlignment.spaceEvenly,
      },
      'WrapCrossAlignment': {
        'values': WrapCrossAlignment.values,
        'start': WrapCrossAlignment.start,
        'end': WrapCrossAlignment.end,
        'center': WrapCrossAlignment.center,
      },
      'RelativeRect': {
        'fill': RelativeRect.fill,
      },
      'RelativeRect.lerp': (props) => RelativeRect.lerp(
            props['pa'][0],
            props['pa'][1],
            props['pa'][2]?.toDouble(),
          ),
      'RenderStack.getIntrinsicDimension': (props) =>
          RenderStack.getIntrinsicDimension(
            props['pa'][0],
            props['pa'][1],
          ),
      'RenderStack.layoutPositionedChild': (props) =>
          RenderStack.layoutPositionedChild(
            props['pa'][0],
            props['pa'][1],
            props['pa'][2],
            props['pa'][3],
          ),
      'StackFit': {
        'values': StackFit.values,
        'loose': StackFit.loose,
        'expand': StackFit.expand,
        'passthrough': StackFit.passthrough,
      },
      'SliverGeometry': {
        'zero': SliverGeometry.zero,
      },
      'GrowthDirection': {
        'values': GrowthDirection.values,
        'forward': GrowthDirection.forward,
        'reverse': GrowthDirection.reverse,
      },
      'RenderViewport': {
        'useTwoPaneSemantics': RenderViewport.useTwoPaneSemantics,
        'excludeFromScrolling': RenderViewport.excludeFromScrolling,
      },
      'CacheExtentStyle': {
        'values': CacheExtentStyle.values,
        'pixel': CacheExtentStyle.pixel,
        'viewport': CacheExtentStyle.viewport,
      },
      'ChildLayoutHelper.dryLayoutChild': (props) =>
          ChildLayoutHelper.dryLayoutChild(
            props['pa'][0],
            props['pa'][1],
          ),
      'ChildLayoutHelper.layoutChild': (props) => ChildLayoutHelper.layoutChild(
            props['pa'][0],
            props['pa'][1],
          ),
      'TableCellVerticalAlignment': {
        'values': TableCellVerticalAlignment.values,
        'top': TableCellVerticalAlignment.top,
        'middle': TableCellVerticalAlignment.middle,
        'bottom': TableCellVerticalAlignment.bottom,
        'baseline': TableCellVerticalAlignment.baseline,
        'fill': TableCellVerticalAlignment.fill,
      },
      'PlatformViewHitTestBehavior': {
        'values': PlatformViewHitTestBehavior.values,
        'opaque': PlatformViewHitTestBehavior.opaque,
        'translucent': PlatformViewHitTestBehavior.translucent,
        'transparent': PlatformViewHitTestBehavior.transparent,
      },
      'PaintingContext.repaintCompositedChild': (props) =>
          PaintingContext.repaintCompositedChild(
            props['pa'][0],
            debugAlsoPaintedParent: props['debugAlsoPaintedParent'] ?? false,
          ),
      'PaintingContext.debugInstrumentRepaintCompositedChild': (props) =>
          PaintingContext.debugInstrumentRepaintCompositedChild(
            props['pa'][0],
            debugAlsoPaintedParent: props['debugAlsoPaintedParent'] ?? false,
            customContext: props['customContext'],
          ),
      'ScrollDirection': {
        'values': ScrollDirection.values,
        'idle': ScrollDirection.idle,
        'forward': ScrollDirection.forward,
        'reverse': ScrollDirection.reverse,
      },
      'HitTestBehavior': {
        'values': HitTestBehavior.values,
        'deferToChild': HitTestBehavior.deferToChild,
        'opaque': HitTestBehavior.opaque,
        'translucent': HitTestBehavior.translucent,
      },
      'DecorationPosition': {
        'values': DecorationPosition.values,
        'background': DecorationPosition.background,
        'foreground': DecorationPosition.foreground,
      },
      'TableBorder.lerp': (props) => TableBorder.lerp(
            props['pa'][0],
            props['pa'][1],
            props['pa'][2]?.toDouble(),
          ),
      'FlexFit': {
        'values': FlexFit.values,
        'tight': FlexFit.tight,
        'loose': FlexFit.loose,
      },
      'MainAxisSize': {
        'values': MainAxisSize.values,
        'min': MainAxisSize.min,
        'max': MainAxisSize.max,
      },
      'MainAxisAlignment': {
        'values': MainAxisAlignment.values,
        'start': MainAxisAlignment.start,
        'end': MainAxisAlignment.end,
        'center': MainAxisAlignment.center,
        'spaceBetween': MainAxisAlignment.spaceBetween,
        'spaceAround': MainAxisAlignment.spaceAround,
        'spaceEvenly': MainAxisAlignment.spaceEvenly,
      },
      'CrossAxisAlignment': {
        'values': CrossAxisAlignment.values,
        'start': CrossAxisAlignment.start,
        'end': CrossAxisAlignment.end,
        'center': CrossAxisAlignment.center,
        'stretch': CrossAxisAlignment.stretch,
        'baseline': CrossAxisAlignment.baseline,
      },
    };
