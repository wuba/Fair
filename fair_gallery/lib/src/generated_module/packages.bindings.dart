// flutterVersion = '3.22.2'
// dartVersion = '3.4.3'
// widgetCount = 62
// apiCount = 163
// ignore_for_file: unused_import, unnecessary_import, implementation_imports, unused_shown_name, deprecated_member_use, prefer_single_quotes, unused_element, unused_field, duplicate_import, prefer_const_constructors, invalid_use_of_visible_for_testing_member
import 'package:flutter/gestures.dart';
import 'package:extended_text_library/extended_text_library.dart'
    as extended_text_library;
import 'package:oktoast/src/core/toast.dart';
import 'package:flutter_highlight/flutter_highlight.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:highlight/highlight.dart' show highlight, Node;
import 'package:widget_with_codeview/widget_with_codeview.dart';
import 'dart:math';
import 'package:flutter/services.dart';
import 'package:flutter_highlight/themes/atom-one-dark.dart';
import 'package:flutter_highlight/themes/atom-one-light.dart';
import 'package:flutter_speed_dial/flutter_speed_dial.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:selectable/selectable.dart';
import 'package:url_launcher/url_launcher.dart' as url_launcher;
import 'package:widget_with_codeview/src/source_code_view.dart';
import 'package:string_scanner/string_scanner.dart';
import 'package:widget_with_codeview/src/syntax_highlighter.dart';
import 'package:extended_image/extended_image.dart';
import 'package:http/http.dart';
import 'package:http_client_helper/http_client_helper.dart';
import 'dart:async';
import 'dart:ui' as ui show Codec;
import 'package:flutter/foundation.dart';
import 'package:extended_image_library/src/extended_image_provider.dart';
import 'dart:ui' as ui show Codec, ImmutableBuffer;
import 'package:flutter/widgets.dart' hide FileImage;
import 'package:extended_image_library/src/platform.dart';
import 'dart:typed_data';
import 'package:extended_image_library/src/extended_resize_image_provider.dart';
import 'package:flutter/painting.dart' hide imageCache;
import 'dart:ui';
import 'package:flutter/painting.dart';
import 'package:extended_image_library/src/network/network_image_io.dart';
import 'dart:convert';
import 'package:crypto/crypto.dart';
import 'package:extended_image_library/extended_image_library.dart';
import 'package:flutter/rendering.dart';
import 'dart:ui' as ui;
import 'package:extended_image/src/image/raw_image.dart';
import 'package:extended_image/src/utils.dart';
import 'package:extended_image/src/extended_image.dart';
import 'package:extended_image/src/editor/crop_layer.dart';
import 'package:extended_image/src/editor/editor_utils.dart';
import 'package:extended_image/src/typedef.dart';
import 'package:extended_image/src/border_painter.dart';
import 'package:extended_image/src/gesture/gesture.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart' hide Image;
import 'package:flutter/scheduler.dart';
import 'package:flutter/semantics.dart';
import 'package:extended_image/src/editor/editor.dart';
import 'package:extended_image/src/gesture/slide_page.dart';
import 'package:extended_image/src/gesture/slide_page_handler.dart';
import 'package:extended_image/src/gesture/utils.dart';
import 'package:extended_image/src/gesture/page_view/gesture_page_view.dart';
import 'package:extended_image/src/gesture_detector/official.dart';
import 'dart:math' as math;
import 'package:extended_image/src/gesture/page_view/rendering/sliver_fill.dart';
import 'dart:ui' as ui show Image;
import 'package:extended_image/src/image/render_image.dart';
import 'package:extended_image/src/image/painting.dart';
import 'package:extended_sliver/extended_sliver.dart';
import 'package:extended_sliver/src/element.dart';
import 'package:extended_sliver/src/rendering.dart';
import 'package:extended_text/extended_text.dart';
import 'package:extended_text_library/src/special_text_span.dart';
import 'package:extended_text_library/src/text_painter_helper.dart';
import 'package:extended_text_library/src/background_text_span.dart';
import 'package:extended_text_library/src/extended_widget_span.dart';
import 'package:extended_text_library/src/special_inline_span_base.dart';
import 'dart:ui' as ui show PlaceholderAlignment, ParagraphBuilder;
import 'dart:ui' as ui show PlaceholderAlignment;
import 'package:extended_text_library/src/extended_text_typedef.dart';
import 'package:extended_text_library/extended_text_library.dart';
import 'package:extended_text/src/extended/rendering/paragraph.dart';
import 'package:extended_text/src/extended/widgets/text_overflow_widget.dart';
import 'package:extended_text/src/extended/widgets/rich_text.dart';
import 'package:keframe/keframe.dart';
import 'dart:collection';
import 'dart:developer';
import 'package:keframe/src/logcat.dart';
import 'package:keframe/src/frame_separate_task.dart';
import 'package:keframe/src/layout_proxy.dart';
import 'package:keframe/src/size_cache_widget.dart';
import 'package:keframe/src/notification.dart';
import 'package:like_button/like_button.dart';
import 'package:like_button/src/painter/bubbles_painter.dart';
import 'package:like_button/src/painter/circle_painter.dart';
import 'package:like_button/src/utils/like_button_model.dart';
import 'package:like_button/src/utils/like_button_typedef.dart';
import 'package:like_button/src/utils/like_button_util.dart';
import 'package:loading_more_list/loading_more_list.dart';
import 'package:extended_list_library/src/typedef.dart';
import 'package:extended_list_library/src/extended_list_library.dart';
import 'package:extended_list_library/extended_list_library.dart';
import 'package:meta/meta.dart';
import 'package:loading_more_list_library/loading_more_list_library.dart';
import 'package:collection/collection.dart';
import 'package:flutter/widgets.dart' hide ViewportBuilder;
import 'package:waterfall_flow/src/rendering/sliver_waterfall_flow.dart';
import 'package:waterfall_flow/src/widgets/sliver.dart';
import 'package:waterfall_flow/waterfall_flow.dart';
import 'package:loading_more_list/src/empty_widget.dart';
import 'package:extended_list/extended_list.dart';
import 'package:loading_more_list/src/list_config/loading_more_list_config.dart';
import 'package:loading_more_list/src/indicator_widget.dart';
import 'package:loading_more_list/src/list_config/sliver_list_config.dart';
import 'package:loading_more_list/src/glow_notification_widget.dart';
import 'package:loading_more_list/src/list_config/list_config.dart';
import 'package:oktoast/oktoast.dart';
import 'package:flutter/material.dart' hide Overlay, OverlayEntry, OverlayState;
import 'package:oktoast/src/widget/animation/animation_builder.dart';
import 'package:oktoast/src/widget/overlay.dart';
import 'package:oktoast/src/core/position.dart';
import 'package:oktoast/src/core/toast_manager.dart';
import 'package:pull_to_refresh_notification/pull_to_refresh_notification.dart';
import 'package:flutter/cupertino.dart' show CupertinoDynamicColor;
import 'package:extended_tabs/extended_tabs.dart';
import 'package:sync_scroll_library/src/gesture/gesture_mixin.dart';
import 'package:sync_scroll_library/src/drag_hold_controller.dart';
import 'package:sync_scroll_library/src/sync/sync_controller.dart';
import 'package:sync_scroll_library/src/link/link_scroll_state.dart';
import 'package:sync_scroll_library/src/sync/sync_scroll_state.dart';
import 'package:sync_scroll_library/src/link/link_controller.dart';
import 'package:flutter/physics.dart' as physics;
import 'package:sync_scroll_library/src/gesture/gesture_state_mixin.dart';
import 'package:sync_scroll_library/sync_scroll_library.dart';
import 'package:extended_tabs/src/tab_bar.dart';
import 'package:extended_tabs/src/scrollable.dart';
import 'package:extended_tabs/src/tab_indicator.dart';
import 'package:extended_tabs/src/page_view.dart';
import 'package:fair/fair.dart';

int _kDefaultSemanticIndexCallback(Widget _, int localIndex) => localIndex;
Widget _defaultBuildAnimation(
  BuildContext context,
  Widget child,
  AnimationController controller,
  double percent,
) {
  return Opacity(opacity: percent, child: child);
}

const Duration _defaultDuration = Duration(milliseconds: 2300);
const Duration _defaultAnimDuration = Duration(milliseconds: 250);
const Color _defaultBackgroundColor = Color(0xDD000000);

const String flutterVersion = '3.22.2';
const String dartVersion = '3.4.3';
const int widgetCount = 62;
const int apiCount = 163;

/// packagesComponents
Map<String, dynamic> packagesComponents = {
  'ActionType.edit': ActionType.edit,
  'ActionType.pan': ActionType.pan,
  'ActionType.values': ActionType.values,
  'ActionType.zoom': ActionType.zoom,
  'AlwaysScrollableClampingScrollPhysics': (props) =>
      AlwaysScrollableClampingScrollPhysics(parent: props['parent']),
  'BackgroundTextSpan': (props) => BackgroundTextSpan(
      style: props['style'],
      text: props['text'],
      recognizer: props['recognizer'],
      background: props['background'],
      clipBorderRadius: props['clipBorderRadius'],
      paintBackground: props['paintBackground'],
      actualText: props['actualText'],
      start: props['start'] ?? 0,
      deleteAll: props['deleteAll'] ?? false,
      semanticsLabel: props['semanticsLabel']),
  'Boundary': (props) => Boundary(
      left: props['left'] ?? false,
      right: props['right'] ?? false,
      top: props['top'] ?? false,
      bottom: props['bottom'] ?? false),
  'BubblesColor': (props) => BubblesColor(
      dotPrimaryColor: props['dotPrimaryColor'],
      dotSecondaryColor: props['dotSecondaryColor'],
      dotThirdColor: props['dotThirdColor'],
      dotLastColor: props['dotLastColor']),
  'CarouselIndicator': (props) => CarouselIndicator(
      controller: props['controller'],
      size: props['size'] ?? const Size(20, 5),
      unselectedColor: props['unselectedColor'],
      selectedColor: props['selectedColor'],
      strokeCap: props['strokeCap'] ?? StrokeCap.square,
      indicatorPadding: props['indicatorPadding'] ??
          const EdgeInsets.symmetric(horizontal: 5),
      tapEnable: props['tapEnable'] ?? false),
  'CircleColor': (props) =>
      CircleColor(start: props['start'], end: props['end']),
  'ColorTabIndicator': (props) => ColorTabIndicator(props['pa'][0]),
  'CountPostion.bottom': CountPostion.bottom,
  'CountPostion.left': CountPostion.left,
  'CountPostion.right': CountPostion.right,
  'CountPostion.top': CountPostion.top,
  'CountPostion.values': CountPostion.values,
  'CropAspectRatios': (props) => CropAspectRatios(),
  'CropAspectRatios.custom': CropAspectRatios.custom,
  'CropAspectRatios.original': CropAspectRatios.original,
  'CropAspectRatios.ratio16_9': CropAspectRatios.ratio16_9,
  'CropAspectRatios.ratio1_1': CropAspectRatios.ratio1_1,
  'CropAspectRatios.ratio3_4': CropAspectRatios.ratio3_4,
  'CropAspectRatios.ratio4_3': CropAspectRatios.ratio4_3,
  'CropAspectRatios.ratio9_16': CropAspectRatios.ratio9_16,
  'DartSyntaxHighlighter': (props) =>
      DartSyntaxHighlighter((props['pa'].length > 0 ? props['pa'][0] : null)),
  'DragHoldController': (props) => DragHoldController(props['pa'][0]),
  'EditActionDetails': (props) => EditActionDetails(),
  'EditorConfig': (props) => EditorConfig(
      maxScale: props['maxScale']?.toDouble() ?? 5.0,
      cropRectPadding: props['cropRectPadding'] ?? const EdgeInsets.all(20.0),
      cornerSize: props['cornerSize'] ?? const Size(30.0, 5.0),
      cornerColor: props['cornerColor'],
      lineColor: props['lineColor'],
      lineHeight: props['lineHeight']?.toDouble() ?? 0.6,
      editorMaskColorHandler: props['editorMaskColorHandler'],
      hitTestSize: props['hitTestSize']?.toDouble() ?? 20.0,
      animationDuration:
          props['animationDuration'] ?? const Duration(milliseconds: 200),
      tickerDuration:
          props['tickerDuration'] ?? const Duration(milliseconds: 400),
      cropAspectRatio:
          props['cropAspectRatio']?.toDouble() ?? CropAspectRatios.custom,
      initialCropAspectRatio: props['initialCropAspectRatio']?.toDouble() ??
          CropAspectRatios.custom,
      initCropRectType: props['initCropRectType'] ?? InitCropRectType.imageRect,
      cropLayerPainter:
          props['cropLayerPainter'] ?? const EditorCropLayerPainter(),
      speed: props['speed']?.toDouble() ?? 1.0,
      hitTestBehavior: props['hitTestBehavior'] ?? HitTestBehavior.deferToChild,
      editActionDetailsIsChanged: props['editActionDetailsIsChanged'],
      reverseMousePointerScrollDirection:
          props['reverseMousePointerScrollDirection'] ?? false),
  'EditorCropLayerPainter': (props) => const EditorCropLayerPainter(),
  'EmptyWidget': (props) =>
      EmptyWidget(props['pa'][0], emptyWidget: props['emptyWidget']),
  'ExtendedAssetBundleImageKey': (props) => ExtendedAssetBundleImageKey(
      bundle: props['bundle'],
      name: props['name'],
      scale: props['scale']?.toDouble() ?? 0,
      cacheRawData: props['cacheRawData'],
      imageCacheName: props['imageCacheName']),
  'ExtendedAssetImageProvider': (props) => ExtendedAssetImageProvider(
      props['pa'][0],
      bundle: props['bundle'],
      package: props['package'],
      cacheRawData: props['cacheRawData'] ?? false,
      imageCacheName: props['imageCacheName']),
  'ExtendedExactAssetImageProvider': (props) => ExtendedExactAssetImageProvider(
      props['pa'][0],
      bundle: props['bundle'],
      package: props['package'],
      scale: props['scale']?.toDouble() ?? 1.0,
      cacheRawData: props['cacheRawData'] ?? false,
      imageCacheName: props['imageCacheName']),
  'ExtendedFileImageProvider': (props) => ExtendedFileImageProvider(
      props['pa'][0],
      scale: props['scale']?.toDouble() ?? 1.0,
      cacheRawData: props['cacheRawData'] ?? false,
      imageCacheName: props['imageCacheName']),
  'ExtendedImage': (props) => ExtendedImage(
      key: props['key'],
      image: props['image'],
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      loadStateChanged: props['loadStateChanged'],
      border: props['border'],
      shape: props['shape'],
      borderRadius: props['borderRadius'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      enableLoadState: props['enableLoadState'] ?? false,
      beforePaintImage: props['beforePaintImage'],
      afterPaintImage: props['afterPaintImage'],
      mode: props['mode'] ?? ExtendedImageMode.none,
      enableMemoryCache: props['enableMemoryCache'] ?? true,
      clearMemoryCacheIfFailed: props['clearMemoryCacheIfFailed'] ?? true,
      onDoubleTap: props['onDoubleTap'],
      initGestureConfigHandler: props['initGestureConfigHandler'],
      enableSlideOutPage: props['enableSlideOutPage'] ?? false,
      constraints: props['constraints'],
      extendedImageEditorKey: props['extendedImageEditorKey'],
      initEditorConfigHandler: props['initEditorConfigHandler'],
      heroBuilderForSlidingPage: props['heroBuilderForSlidingPage'],
      clearMemoryCacheWhenDispose:
          props['clearMemoryCacheWhenDispose'] ?? false,
      extendedImageGestureKey: props['extendedImageGestureKey'],
      isAntiAlias: props['isAntiAlias'] ?? false,
      handleLoadingProgress: props['handleLoadingProgress'] ?? false,
      layoutInsets: props['layoutInsets'] ?? EdgeInsets.zero),
  'ExtendedImage.asset': (props) => ExtendedImage.asset(props['pa'][0],
      key: props['key'],
      bundle: props['bundle'],
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      scale: props['scale']?.toDouble(),
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      package: props['package'],
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      loadStateChanged: props['loadStateChanged'],
      shape: props['shape'],
      border: props['border'],
      borderRadius: props['borderRadius'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      enableLoadState: props['enableLoadState'] ?? false,
      beforePaintImage: props['beforePaintImage'],
      afterPaintImage: props['afterPaintImage'],
      mode: props['mode'] ?? ExtendedImageMode.none,
      enableMemoryCache: props['enableMemoryCache'] ?? true,
      clearMemoryCacheIfFailed: props['clearMemoryCacheIfFailed'] ?? true,
      onDoubleTap: props['onDoubleTap'],
      initGestureConfigHandler: props['initGestureConfigHandler'],
      enableSlideOutPage: props['enableSlideOutPage'] ?? false,
      constraints: props['constraints'],
      extendedImageEditorKey: props['extendedImageEditorKey'],
      initEditorConfigHandler: props['initEditorConfigHandler'],
      heroBuilderForSlidingPage: props['heroBuilderForSlidingPage'],
      clearMemoryCacheWhenDispose:
          props['clearMemoryCacheWhenDispose'] ?? false,
      extendedImageGestureKey: props['extendedImageGestureKey'],
      cacheWidth: props['cacheWidth'],
      cacheHeight: props['cacheHeight'],
      isAntiAlias: props['isAntiAlias'] ?? false,
      compressionRatio: props['compressionRatio']?.toDouble(),
      maxBytes: props['maxBytes'],
      cacheRawData: props['cacheRawData'] ?? false,
      imageCacheName: props['imageCacheName'],
      layoutInsets: props['layoutInsets'] ?? EdgeInsets.zero),
  'ExtendedImage.file': (props) => ExtendedImage.file(props['pa'][0],
      key: props['key'],
      scale: props['scale']?.toDouble() ?? 1.0,
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      loadStateChanged: props['loadStateChanged'],
      shape: props['shape'],
      border: props['border'],
      borderRadius: props['borderRadius'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      enableLoadState: props['enableLoadState'] ?? false,
      beforePaintImage: props['beforePaintImage'],
      afterPaintImage: props['afterPaintImage'],
      mode: props['mode'] ?? ExtendedImageMode.none,
      enableMemoryCache: props['enableMemoryCache'] ?? true,
      clearMemoryCacheIfFailed: props['clearMemoryCacheIfFailed'] ?? true,
      onDoubleTap: props['onDoubleTap'],
      initGestureConfigHandler: props['initGestureConfigHandler'],
      enableSlideOutPage: props['enableSlideOutPage'] ?? false,
      constraints: props['constraints'],
      extendedImageEditorKey: props['extendedImageEditorKey'],
      initEditorConfigHandler: props['initEditorConfigHandler'],
      heroBuilderForSlidingPage: props['heroBuilderForSlidingPage'],
      clearMemoryCacheWhenDispose:
          props['clearMemoryCacheWhenDispose'] ?? false,
      extendedImageGestureKey: props['extendedImageGestureKey'],
      cacheWidth: props['cacheWidth'],
      cacheHeight: props['cacheHeight'],
      isAntiAlias: props['isAntiAlias'] ?? false,
      compressionRatio: props['compressionRatio']?.toDouble(),
      maxBytes: props['maxBytes'],
      cacheRawData: props['cacheRawData'] ?? false,
      imageCacheName: props['imageCacheName'],
      layoutInsets: props['layoutInsets'] ?? EdgeInsets.zero),
  'ExtendedImage.globalStateWidgetBuilder':
      ExtendedImage.globalStateWidgetBuilder,
  'ExtendedImage.memory': (props) => ExtendedImage.memory(props['pa'][0],
      key: props['key'],
      scale: props['scale']?.toDouble() ?? 1.0,
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      loadStateChanged: props['loadStateChanged'],
      shape: props['shape'],
      border: props['border'],
      borderRadius: props['borderRadius'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      enableLoadState: props['enableLoadState'] ?? false,
      beforePaintImage: props['beforePaintImage'],
      afterPaintImage: props['afterPaintImage'],
      mode: props['mode'] ?? ExtendedImageMode.none,
      enableMemoryCache: props['enableMemoryCache'] ?? true,
      clearMemoryCacheIfFailed: props['clearMemoryCacheIfFailed'] ?? true,
      onDoubleTap: props['onDoubleTap'],
      initGestureConfigHandler: props['initGestureConfigHandler'],
      enableSlideOutPage: props['enableSlideOutPage'] ?? false,
      constraints: props['constraints'],
      extendedImageEditorKey: props['extendedImageEditorKey'],
      initEditorConfigHandler: props['initEditorConfigHandler'],
      heroBuilderForSlidingPage: props['heroBuilderForSlidingPage'],
      clearMemoryCacheWhenDispose:
          props['clearMemoryCacheWhenDispose'] ?? false,
      extendedImageGestureKey: props['extendedImageGestureKey'],
      cacheWidth: props['cacheWidth'],
      cacheHeight: props['cacheHeight'],
      isAntiAlias: props['isAntiAlias'] ?? false,
      compressionRatio: props['compressionRatio']?.toDouble(),
      maxBytes: props['maxBytes'],
      cacheRawData: props['cacheRawData'] ?? false,
      imageCacheName: props['imageCacheName'],
      layoutInsets: props['layoutInsets'] ?? EdgeInsets.zero),
  'ExtendedImage.network': (props) => ExtendedImage.network(props['pa'][0],
      key: props['key'],
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      loadStateChanged: props['loadStateChanged'],
      shape: props['shape'],
      border: props['border'],
      borderRadius: props['borderRadius'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      enableLoadState: props['enableLoadState'] ?? true,
      beforePaintImage: props['beforePaintImage'],
      afterPaintImage: props['afterPaintImage'],
      mode: props['mode'] ?? ExtendedImageMode.none,
      enableMemoryCache: props['enableMemoryCache'] ?? true,
      clearMemoryCacheIfFailed: props['clearMemoryCacheIfFailed'] ?? true,
      onDoubleTap: props['onDoubleTap'],
      initGestureConfigHandler: props['initGestureConfigHandler'],
      enableSlideOutPage: props['enableSlideOutPage'] ?? false,
      constraints: props['constraints'],
      cancelToken: props['cancelToken'],
      retries: props['retries'] ?? 3,
      timeLimit: props['timeLimit'],
      headers: props['headers'],
      cache: props['cache'] ?? true,
      scale: props['scale']?.toDouble() ?? 1.0,
      timeRetry: props['timeRetry'] ?? const Duration(milliseconds: 100),
      extendedImageEditorKey: props['extendedImageEditorKey'],
      initEditorConfigHandler: props['initEditorConfigHandler'],
      heroBuilderForSlidingPage: props['heroBuilderForSlidingPage'],
      clearMemoryCacheWhenDispose:
          props['clearMemoryCacheWhenDispose'] ?? false,
      handleLoadingProgress: props['handleLoadingProgress'] ?? false,
      extendedImageGestureKey: props['extendedImageGestureKey'],
      cacheWidth: props['cacheWidth'],
      cacheHeight: props['cacheHeight'],
      isAntiAlias: props['isAntiAlias'] ?? false,
      cacheKey: props['cacheKey'],
      printError: props['printError'] ?? true,
      compressionRatio: props['compressionRatio']?.toDouble(),
      maxBytes: props['maxBytes'],
      cacheRawData: props['cacheRawData'] ?? false,
      imageCacheName: props['imageCacheName'],
      cacheMaxAge: props['cacheMaxAge'],
      layoutInsets: props['layoutInsets'] ?? EdgeInsets.zero),
  'ExtendedImageBorderPainter': (props) => ExtendedImageBorderPainter(
      border: props['border'],
      shape: props['shape'] ?? BoxShape.rectangle,
      borderRadius: props['borderRadius']),
  'ExtendedImageCropLayerPainter': (props) => ExtendedImageCropLayerPainter(
      cropRect: props['cropRect'],
      cropLayerPainter: props['cropLayerPainter'],
      lineColor: props['lineColor'],
      cornerColor: props['cornerColor'],
      cornerSize: props['cornerSize'],
      lineHeight: props['lineHeight']?.toDouble() ?? 0,
      maskColor: props['maskColor'],
      pointerDown: props['pointerDown']),
  'ExtendedImageEditor': (props) => ExtendedImageEditor(
      extendedImageState: props['extendedImageState'], key: props['key']),
  'ExtendedImageGesture': (props) => ExtendedImageGesture(props['pa'][0],
      imageBuilder: props['imageBuilder'],
      canScaleImage: props['canScaleImage'],
      key: props['key']),
  'ExtendedImageGesturePageView': (props) => ExtendedImageGesturePageView(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      children: as<Widget>(props['children']) ?? const <Widget>[],
      canScrollPage: props['canScrollPage']),
  'ExtendedImageGesturePageView.builder': (props) =>
      ExtendedImageGesturePageView.builder(
          key: props['key'],
          scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
          reverse: props['reverse'] ?? false,
          controller: props['controller'],
          physics: props['physics'],
          pageSnapping: props['pageSnapping'] ?? true,
          onPageChanged: props['onPageChanged'],
          itemBuilder: props['itemBuilder'],
          itemCount: props['itemCount'],
          canScrollPage: props['canScrollPage']),
  'ExtendedImageGesturePageView.custom': (props) =>
      ExtendedImageGesturePageView.custom(
          key: props['key'],
          scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
          reverse: props['reverse'] ?? false,
          controller: props['controller'],
          pageSnapping: props['pageSnapping'] ?? true,
          onPageChanged: props['onPageChanged'],
          canScrollPage: props['canScrollPage'],
          childrenDelegate: props['childrenDelegate']),
  'ExtendedImageMode.editor': ExtendedImageMode.editor,
  'ExtendedImageMode.gesture': ExtendedImageMode.gesture,
  'ExtendedImageMode.none': ExtendedImageMode.none,
  'ExtendedImageMode.values': ExtendedImageMode.values,
  'ExtendedImageSlidePage': (props) => ExtendedImageSlidePage(
      child: props['child'],
      slidePageBackgroundHandler: props['slidePageBackgroundHandler'],
      slideScaleHandler: props['slideScaleHandler'],
      slideOffsetHandler: props['slideOffsetHandler'],
      slideEndHandler: props['slideEndHandler'],
      slideAxis: props['slideAxis'] ?? SlideAxis.both,
      resetPageDuration:
          props['resetPageDuration'] ?? const Duration(milliseconds: 500),
      slideType: props['slideType'] ?? SlideType.onlyImage,
      onSlidingPage: props['onSlidingPage'],
      key: props['key']),
  'ExtendedImageSlidePageHandler': (props) => ExtendedImageSlidePageHandler(
      child: props['child'],
      extendedImageSlidePageState: props['extendedImageSlidePageState'],
      heroBuilderForSlidingPage: props['heroBuilderForSlidingPage']),
  'ExtendedListDelegate': (props) => ExtendedListDelegate(
      lastChildLayoutTypeBuilder: props['lastChildLayoutTypeBuilder'],
      collectGarbage: props['collectGarbage'],
      viewportBuilder: props['viewportBuilder'],
      closeToTrailing: props['closeToTrailing'] ?? false),
  'ExtendedMemoryImageProvider': (props) => ExtendedMemoryImageProvider(
      props['pa'][0],
      scale: props['scale']?.toDouble() ?? 1.0,
      cacheRawData: props['cacheRawData'] ?? false,
      imageCacheName: props['imageCacheName']),
  'ExtendedPageController': (props) => ExtendedPageController(
      initialPage: props['initialPage'] ?? 0,
      keepPage: props['keepPage'] ?? true,
      viewportFraction: props['viewportFraction']?.toDouble() ?? 1.0,
      shouldIgnorePointerWhenScrolling:
          props['shouldIgnorePointerWhenScrolling'] ?? false,
      pageSpacing: props['pageSpacing']?.toDouble() ?? 0.0),
  'ExtendedPageView': (props) => ExtendedPageView(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      children: as<Widget>(props['children']) ?? const <Widget>[],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      allowImplicitScrolling: props['allowImplicitScrolling'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      cacheExtent: props['cacheExtent'] ?? 0,
      shouldIgnorePointerWhenScrolling:
          props['shouldIgnorePointerWhenScrolling'] ?? true),
  'ExtendedPageView.builder': (props) => ExtendedPageView.builder(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      itemBuilder: props['itemBuilder'],
      itemCount: props['itemCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      allowImplicitScrolling: props['allowImplicitScrolling'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      cacheExtent: props['cacheExtent'] ?? 0,
      shouldIgnorePointerWhenScrolling:
          props['shouldIgnorePointerWhenScrolling'] ?? true),
  'ExtendedPageView.custom': (props) => ExtendedPageView.custom(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      childrenDelegate: props['childrenDelegate'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      allowImplicitScrolling: props['allowImplicitScrolling'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      cacheExtent: props['cacheExtent'] ?? 0,
      shouldIgnorePointerWhenScrolling:
          props['shouldIgnorePointerWhenScrolling'] ?? true),
  'ExtendedRawImage': (props) => ExtendedRawImage(
      key: props['key'],
      image: props['image'],
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      scale: props['scale']?.toDouble() ?? 1.0,
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      invertColors: props['invertColors'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      sourceRect: props['sourceRect'],
      beforePaintImage: props['beforePaintImage'],
      afterPaintImage: props['afterPaintImage'],
      gestureDetails: props['gestureDetails'],
      editActionDetails: props['editActionDetails'],
      isAntiAlias: props['isAntiAlias'] ?? false,
      debugImageLabel: props['debugImageLabel'],
      layoutInsets: props['layoutInsets'] ?? EdgeInsets.zero),
  'ExtendedRenderImage': (props) => ExtendedRenderImage(
      image: props['image'],
      debugImageLabel: props['debugImageLabel'],
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      scale: props['scale']?.toDouble() ?? 1.0,
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      textDirection: props['textDirection'],
      invertColors: props['invertColors'] ?? false,
      isAntiAlias: props['isAntiAlias'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      sourceRect: props['sourceRect'],
      afterPaintImage: props['afterPaintImage'],
      beforePaintImage: props['beforePaintImage'],
      gestureDetails: props['gestureDetails'],
      editActionDetails: props['editActionDetails'],
      layoutInsets: props['layoutInsets'] ?? EdgeInsets.zero),
  'ExtendedRenderSliverFillViewport': (props) =>
      ExtendedRenderSliverFillViewport(
          childManager: props['childManager'],
          viewportFraction: props['viewportFraction']?.toDouble() ?? 1.0,
          pageSpacing: props['pageSpacing']?.toDouble() ?? 0.0),
  'ExtendedResizeImage': (props) => ExtendedResizeImage(props['pa'][0],
      compressionRatio: props['compressionRatio']?.toDouble(),
      maxBytes: props['maxBytes'] ?? 50 << 10,
      width: props['width'],
      height: props['height'],
      allowUpscaling: props['allowUpscaling'] ?? false,
      cacheRawData: props['cacheRawData'] ?? false,
      imageCacheName: props['imageCacheName'],
      policy: props['policy'] ?? ResizeImagePolicy.exact),
  'ExtendedResizeImage.resizeIfNeeded': (props) =>
      ExtendedResizeImage.resizeIfNeeded(
          provider: props['provider'],
          cacheWidth: props['cacheWidth'],
          cacheHeight: props['cacheHeight'],
          compressionRatio: props['compressionRatio']?.toDouble(),
          maxBytes: props['maxBytes'] ?? 50 << 10,
          cacheRawData: props['cacheRawData'] ?? false,
          imageCacheName: props['imageCacheName']),
  'ExtendedRichText': (props) => ExtendedRichText(
      key: props['key'],
      text: props['text'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textDirection: props['textDirection'],
      softWrap: props['softWrap'] ?? true,
      overflow: props['overflow'] ?? TextOverflow.clip,
      textScaler: props['textScaler'] ?? TextScaler.noScaling,
      maxLines: props['maxLines'],
      locale: props['locale'],
      strutStyle: props['strutStyle'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      textHeightBehavior: props['textHeightBehavior'],
      selectionRegistrar: props['selectionRegistrar'],
      selectionColor: props['selectionColor'],
      overflowWidget: props['overflowWidget'],
      canSelectPlaceholderSpan: props['canSelectPlaceholderSpan'] ?? true),
  'ExtendedScrollable': (props) => ExtendedScrollable(
      key: props['key'],
      axisDirection: props['axisDirection'] ?? AxisDirection.down,
      controller: props['controller'],
      physics: props['physics'],
      viewportBuilder: props['viewportBuilder'],
      incrementCalculator: props['incrementCalculator'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      restorationId: props['restorationId'],
      scrollBehavior: props['scrollBehavior'],
      shouldIgnorePointerWhenScrolling:
          props['shouldIgnorePointerWhenScrolling'] ?? true),
  'ExtendedSliverAppbar': (props) => ExtendedSliverAppbar(
      leading: props['leading'],
      title: props['title'],
      actions: props['actions'],
      background: props['background'],
      toolBarColor: props['toolBarColor'],
      onBuild: props['onBuild'],
      statusbarHeight: props['statusbarHeight']?.toDouble(),
      toolbarHeight: props['toolbarHeight']?.toDouble(),
      isOpacityFadeWithToolbar: props['isOpacityFadeWithToolbar'] ?? true,
      isOpacityFadeWithTitle: props['isOpacityFadeWithTitle'] ?? true,
      mainAxisAlignment:
          props['mainAxisAlignment'] ?? MainAxisAlignment.spaceBetween,
      crossAxisAlignment:
          props['crossAxisAlignment'] ?? CrossAxisAlignment.center),
  'ExtendedSliverFillViewport': (props) => ExtendedSliverFillViewport(
      key: props['key'],
      delegate: props['delegate'],
      viewportFraction: props['viewportFraction']?.toDouble() ?? 1.0,
      padEnds: props['padEnds'] ?? true,
      pageSpacing: props['pageSpacing']?.toDouble() ?? 0.0),
  'ExtendedTab': (props) => ExtendedTab(
      key: props['key'],
      text: props['text'],
      icon: props['icon'],
      iconMargin: props['iconMargin'] ?? const EdgeInsets.only(bottom: 10.0),
      child: props['child'],
      scrollDirection: props['scrollDirection'],
      size: props['size']?.toDouble(),
      height: props['height']?.toDouble()),
  'ExtendedTabBar': (props) => ExtendedTabBar(
      key: props['key'],
      tabs: as<Widget>(props['tabs']) ?? const [],
      controller: props['controller'],
      isScrollable: props['isScrollable'] ?? false,
      indicatorColor: props['indicatorColor'],
      automaticIndicatorColorAdjustment:
          props['automaticIndicatorColorAdjustment'] ?? true,
      indicatorWeight: props['indicatorWeight']?.toDouble() ?? 2.0,
      indicatorPadding: props['indicatorPadding'] ?? EdgeInsets.zero,
      indicator: props['indicator'],
      indicatorSize: props['indicatorSize'],
      labelColor: props['labelColor'],
      labelStyle: props['labelStyle'],
      labelPadding: props['labelPadding'],
      unselectedLabelColor: props['unselectedLabelColor'],
      unselectedLabelStyle: props['unselectedLabelStyle'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      overlayColor: props['overlayColor'],
      mouseCursor: props['mouseCursor'],
      enableFeedback: props['enableFeedback'],
      onTap: props['onTap'],
      physics: props['physics'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      foregroundIndicator: props['foregroundIndicator'] ?? false,
      strokeCap: props['strokeCap'] ?? StrokeCap.square,
      mainAxisAlignment: props['mainAxisAlignment']),
  'ExtendedTabBarView': (props) => ExtendedTabBarView(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      controller: props['controller'],
      physics: props['physics'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      cacheExtent: props['cacheExtent'] ?? 0,
      link: props['link'] ?? true,
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      pageController: props['pageController'],
      shouldIgnorePointerWhenScrolling:
          props['shouldIgnorePointerWhenScrolling'] ?? true,
      viewportFraction: props['viewportFraction']?.toDouble() ?? 1.0),
  'ExtendedText': (props) => ExtendedText(props['pa'][0],
      key: props['key'],
      style: props['style'],
      strutStyle: props['strutStyle'],
      textAlign: props['textAlign'],
      textDirection: props['textDirection'],
      locale: props['locale'],
      softWrap: props['softWrap'],
      overflow: props['overflow'],
      textScaler: props['textScaler'],
      maxLines: props['maxLines'],
      semanticsLabel: props['semanticsLabel'],
      textWidthBasis: props['textWidthBasis'],
      textHeightBehavior: props['textHeightBehavior'],
      selectionColor: props['selectionColor'],
      joinZeroWidthSpace: props['joinZeroWidthSpace'] ?? false,
      onSpecialTextTap: props['onSpecialTextTap'],
      overflowWidget: props['overflowWidget'],
      specialTextSpanBuilder: props['specialTextSpanBuilder'],
      canSelectPlaceholderSpan: props['canSelectPlaceholderSpan'] ?? true),
  'ExtendedText.rich': (props) => ExtendedText.rich(props['pa'][0],
      key: props['key'],
      style: props['style'],
      strutStyle: props['strutStyle'],
      textAlign: props['textAlign'],
      textDirection: props['textDirection'],
      locale: props['locale'],
      softWrap: props['softWrap'],
      overflow: props['overflow'],
      textScaler: props['textScaler'],
      maxLines: props['maxLines'],
      semanticsLabel: props['semanticsLabel'],
      textWidthBasis: props['textWidthBasis'],
      textHeightBehavior: props['textHeightBehavior'],
      selectionColor: props['selectionColor'],
      joinZeroWidthSpace: props['joinZeroWidthSpace'] ?? false,
      onSpecialTextTap: props['onSpecialTextTap'],
      overflowWidget: props['overflowWidget'],
      specialTextSpanBuilder: props['specialTextSpanBuilder'],
      canSelectPlaceholderSpan: props['canSelectPlaceholderSpan'] ?? true),
  'ExtendedTextLibraryUtils.convertKeyboardMoveSelection': (props) =>
      ExtendedTextLibraryUtils.convertKeyboardMoveSelection(
          props['pa'][0], props['pa'][1]),
  'ExtendedTextLibraryUtils.convertKeyboardMoveTextPostion': (props) =>
      ExtendedTextLibraryUtils.convertKeyboardMoveTextPostion(
          props['pa'][0], props['pa'][1]),
  'ExtendedTextLibraryUtils.convertTextInputPostionToTextPainterPostion':
      (props) =>
          ExtendedTextLibraryUtils.convertTextInputPostionToTextPainterPostion(
              props['pa'][0], props['pa'][1]),
  'ExtendedTextLibraryUtils.convertTextInputSelectionToTextPainterSelection':
      (props) => ExtendedTextLibraryUtils
          .convertTextInputSelectionToTextPainterSelection(
              props['pa'][0], props['pa'][1]),
  'ExtendedTextLibraryUtils.convertTextPainterPostionToTextInputPostion':
      (props) =>
          ExtendedTextLibraryUtils.convertTextPainterPostionToTextInputPostion(
              props['pa'][0], props['pa'][1],
              end: props['end']),
  'ExtendedTextLibraryUtils.convertTextPainterSelectionToTextInputSelection':
      (props) => ExtendedTextLibraryUtils
          .convertTextPainterSelectionToTextInputSelection(
              props['pa'][0], props['pa'][1],
              selectWord: props['selectWord'] ?? false),
  'ExtendedTextLibraryUtils.correctCaretOffset': (props) =>
      ExtendedTextLibraryUtils.correctCaretOffset(
          props['pa'][0], props['pa'][1], props['pa'][2],
          oldValue: props['oldValue']),
  'ExtendedTextLibraryUtils.getCaretOffset': (props) =>
      ExtendedTextLibraryUtils.getCaretOffset(
          props['pa'][0], props['pa'][1], props['pa'][2],
          caretHeightCallBack: props['caretHeightCallBack'],
          effectiveOffset: props['effectiveOffset'],
          caretPrototype: props['caretPrototype'] ?? Rect.zero,
          boxHeightStyle: props['boxHeightStyle'] ?? ui.BoxHeightStyle.tight,
          boxWidthStyle: props['boxWidthStyle'] ?? ui.BoxWidthStyle.tight),
  'ExtendedTextLibraryUtils.getInlineOffset': (props) =>
      ExtendedTextLibraryUtils.getInlineOffset(props['pa'][0]),
  'ExtendedTextLibraryUtils.handleSpecialTextSpanDelete': (props) =>
      ExtendedTextLibraryUtils.handleSpecialTextSpanDelete(
          props['pa'][0], props['pa'][1], props['pa'][2], props['pa'][3]),
  'ExtendedTextLibraryUtils.hasSpecialText': (props) =>
      ExtendedTextLibraryUtils.hasSpecialText(props['pa'][0]),
  'ExtendedTextLibraryUtils.hasT': (props) =>
      ExtendedTextLibraryUtils.hasT(props['pa'][0]),
  'ExtendedTextLibraryUtils.hitTestChild': (props) =>
      ExtendedTextLibraryUtils.hitTestChild(
          props['pa'][0], props['pa'][1], props['pa'][2],
          position: props['position']),
  'ExtendedTextLibraryUtils.joinChar': (props) =>
      ExtendedTextLibraryUtils.joinChar(
          props['pa'][0], props['pa'][1], props['pa'][2]),
  'ExtendedTextLibraryUtils.makeSureCaretNotInSpecialText': (props) =>
      ExtendedTextLibraryUtils.makeSureCaretNotInSpecialText(
          props['pa'][0], props['pa'][1]),
  'ExtendedTextLibraryUtils.textSpanToActualText': (props) =>
      ExtendedTextLibraryUtils.textSpanToActualText(props['pa'][0]),
  'ExtendedTextLibraryUtils.zeroWidthSpace':
      ExtendedTextLibraryUtils.zeroWidthSpace,
  'ExtendedUnderlineTabIndicator': (props) => ExtendedUnderlineTabIndicator(
      borderSide: props['borderSide'] ??
          const BorderSide(width: 2.0, color: Colors.white),
      insets: props['insets'] ?? EdgeInsets.zero,
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      strokeCap: props['strokeCap'] ?? StrokeCap.square,
      size: props['size']?.toDouble()),
  'ExtendedWidgetSpan': (props) => ExtendedWidgetSpan(
      child: props['child'],
      actualText: props['actualText'] ?? '\uFFFC',
      start: props['start'] ?? 0,
      deleteAll: props['deleteAll'] ?? true,
      alignment: props['alignment'] ?? ui.PlaceholderAlignment.bottom,
      baseline: props['baseline'],
      style: props['style'],
      hide: props['hide'] ?? false),
  'FixedOverscrollBouncingScrollPhysics': (props) =>
      FixedOverscrollBouncingScrollPhysics(parent: props['parent']),
  'FrameSeparateTaskQueue.instance': FrameSeparateTaskQueue.instance,
  'FrameSeparateWidget': (props) => FrameSeparateWidget(
      key: props['key'],
      index: props['index'],
      placeHolder: props['placeHolder'],
      child: props['child']),
  'GestureAnimation': (props) => GestureAnimation(props['pa'][0],
      offsetCallBack: props['offsetCallBack'],
      scaleCallBack: props['scaleCallBack']),
  'GestureConfig': (props) => GestureConfig(
      minScale: props['minScale']?.toDouble() ?? 0.8,
      maxScale: props['maxScale']?.toDouble() ?? 5.0,
      speed: props['speed']?.toDouble() ?? 1.0,
      cacheGesture: props['cacheGesture'] ?? false,
      inertialSpeed: props['inertialSpeed']?.toDouble() ?? 100.0,
      initialScale: props['initialScale']?.toDouble() ?? 1.0,
      inPageView: props['inPageView'] ?? false,
      animationMinScale: props['animationMinScale']?.toDouble(),
      animationMaxScale: props['animationMaxScale']?.toDouble(),
      initialAlignment: props['initialAlignment'] ?? InitialAlignment.center,
      gestureDetailsIsChanged: props['gestureDetailsIsChanged'],
      hitTestBehavior: props['hitTestBehavior'] ?? HitTestBehavior.deferToChild,
      reverseMousePointerScrollDirection:
          props['reverseMousePointerScrollDirection'] ?? false),
  'GestureDetails': (props) => GestureDetails(
      offset: props['offset'],
      totalScale: props['totalScale']?.toDouble(),
      gestureDetails: props['gestureDetails'],
      actionType: props['actionType'] ?? ActionType.pan,
      userOffset: props['userOffset'] ?? true),
  'GesturePageView': (props) => GesturePageView(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      children: as<Widget>(props['children']) ?? const <Widget>[],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      allowImplicitScrolling: props['allowImplicitScrolling'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      scrollBehavior: props['scrollBehavior'],
      padEnds: props['padEnds'] ?? true,
      preloadPagesCount: props['preloadPagesCount'] ?? 0),
  'GesturePageView.builder': (props) => GesturePageView.builder(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      itemBuilder: props['itemBuilder'],
      itemCount: props['itemCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      allowImplicitScrolling: props['allowImplicitScrolling'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      scrollBehavior: props['scrollBehavior'],
      padEnds: props['padEnds'] ?? true,
      preloadPagesCount: props['preloadPagesCount'] ?? 0),
  'GesturePageView.custom': (props) => GesturePageView.custom(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      childrenDelegate: props['childrenDelegate'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      allowImplicitScrolling: props['allowImplicitScrolling'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      scrollBehavior: props['scrollBehavior'],
      padEnds: props['padEnds'] ?? true,
      preloadPagesCount: props['preloadPagesCount'] ?? 0),
  'GlowNotificationWidget': (props) => GlowNotificationWidget(props['pa'][0],
      showGlowLeading: props['showGlowLeading'] ?? false,
      showGlowTrailing: props['showGlowTrailing'] ?? false),
  'HighlightView': (props) => HighlightView(props['pa'][0],
      language: props['language'],
      theme: props['theme'] ?? const {},
      padding: props['padding'],
      textStyle: props['textStyle'],
      tabSize: props['tabSize'] ?? 8),
  'ImageSpan': (props) => ImageSpan(props['pa'][0],
      key: props['key'],
      imageWidth: props['imageWidth']?.toDouble() ?? 0,
      imageHeight: props['imageHeight']?.toDouble() ?? 0,
      margin: props['margin'],
      start: props['start'] ?? 0,
      alignment: props['alignment'] ?? ui.PlaceholderAlignment.middle,
      actualText: props['actualText'],
      baseline: props['baseline'],
      fit: props['fit'] ?? BoxFit.scaleDown,
      loadingBuilder: props['loadingBuilder'],
      frameBuilder: props['frameBuilder'],
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      color: props['color'],
      colorBlendMode: props['colorBlendMode'],
      imageAlignment: props['imageAlignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      onTap: props['onTap'],
      behavior: props['behavior'] ?? HitTestBehavior.deferToChild),
  'IndicatorStatus.empty': IndicatorStatus.empty,
  'IndicatorStatus.error': IndicatorStatus.error,
  'IndicatorStatus.fullScreenBusying': IndicatorStatus.fullScreenBusying,
  'IndicatorStatus.fullScreenError': IndicatorStatus.fullScreenError,
  'IndicatorStatus.loadingMoreBusying': IndicatorStatus.loadingMoreBusying,
  'IndicatorStatus.noMoreLoad': IndicatorStatus.noMoreLoad,
  'IndicatorStatus.none': IndicatorStatus.none,
  'IndicatorStatus.values': IndicatorStatus.values,
  'IndicatorWidget': (props) => IndicatorWidget(props['pa'][0],
      tryAgain: props['tryAgain'],
      text: props['text'],
      backgroundColor: props['backgroundColor'],
      isSliver: props['isSliver'] ?? false,
      emptyWidget: props['emptyWidget']),
  'InitCropRectType.imageRect': InitCropRectType.imageRect,
  'InitCropRectType.layoutRect': InitCropRectType.layoutRect,
  'InitCropRectType.values': InitCropRectType.values,
  'InitialAlignment.bottomCenter': InitialAlignment.bottomCenter,
  'InitialAlignment.bottomLeft': InitialAlignment.bottomLeft,
  'InitialAlignment.bottomRight': InitialAlignment.bottomRight,
  'InitialAlignment.center': InitialAlignment.center,
  'InitialAlignment.centerLeft': InitialAlignment.centerLeft,
  'InitialAlignment.centerRight': InitialAlignment.centerRight,
  'InitialAlignment.topCenter': InitialAlignment.topCenter,
  'InitialAlignment.topLeft': InitialAlignment.topLeft,
  'InitialAlignment.topRight': InitialAlignment.topRight,
  'InitialAlignment.values': InitialAlignment.values,
  'InitialRenderSizeChangedWithCallback': (props) =>
      InitialRenderSizeChangedWithCallback(
          child: props['child'],
          onLayoutChangedCallback: props['onLayoutChangedCallback']),
  'ItemSizeInfoNotifier': (props) => ItemSizeInfoNotifier(
      key: props['key'], index: props['index'], child: props['child']),
  'LastChildLayoutType.foot': LastChildLayoutType.foot,
  'LastChildLayoutType.fullCrossAxisExtent':
      LastChildLayoutType.fullCrossAxisExtent,
  'LastChildLayoutType.none': LastChildLayoutType.none,
  'LastChildLayoutType.values': LastChildLayoutType.values,
  'LayoutInfoNotification': (props) =>
      LayoutInfoNotification(props['pa'][0], props['pa'][1]),
  'LessSpringClampingScrollPhysics': (props) =>
      const LessSpringClampingScrollPhysics(),
  'LikeButton': (props) => LikeButton(
      key: props['key'],
      size: props['size']?.toDouble() ?? 30.0,
      likeBuilder: props['likeBuilder'],
      countBuilder: props['countBuilder'],
      bubblesSize: props['bubblesSize']?.toDouble(),
      circleSize: props['circleSize']?.toDouble(),
      likeCount: props['likeCount'],
      isLiked: props['isLiked'] ?? false,
      mainAxisAlignment: props['mainAxisAlignment'] ?? MainAxisAlignment.center,
      crossAxisAlignment:
          props['crossAxisAlignment'] ?? CrossAxisAlignment.center,
      animationDuration:
          props['animationDuration'] ?? const Duration(milliseconds: 1000),
      likeCountAnimationType:
          props['likeCountAnimationType'] ?? LikeCountAnimationType.part,
      likeCountAnimationDuration: props['likeCountAnimationDuration'] ??
          const Duration(milliseconds: 500),
      likeCountPadding:
          props['likeCountPadding'] ?? const EdgeInsets.only(left: 3.0),
      bubblesColor: props['bubblesColor'] ??
          const BubblesColor(
              dotPrimaryColor: Color(0xFFFFC107),
              dotSecondaryColor: Color(0xFFFF9800),
              dotThirdColor: Color(0xFFFF5722),
              dotLastColor: Color(0xFFF44336)),
      circleColor: props['circleColor'] ??
          const CircleColor(start: Color(0xFFFF5722), end: Color(0xFFFFC107)),
      onTap: props['onTap'],
      countPostion: props['countPostion'] ?? CountPostion.right,
      padding: props['padding'],
      countDecoration: props['countDecoration'],
      postFrameCallback: props['postFrameCallback']),
  'LikeCountAnimationType.all': LikeCountAnimationType.all,
  'LikeCountAnimationType.none': LikeCountAnimationType.none,
  'LikeCountAnimationType.part': LikeCountAnimationType.part,
  'LikeCountAnimationType.values': LikeCountAnimationType.values,
  'LikeCountClip': (props) => LikeCountClip(),
  'LinkPageController': (props) => LinkPageController(
      initialPage: props['initialPage'] ?? 0,
      keepPage: props['keepPage'] ?? true,
      viewportFraction: props['viewportFraction']?.toDouble() ?? 1.0,
      parent: props['parent']),
  'LinkScrollController': (props) => LinkScrollController(
      initialScrollOffset: props['initialScrollOffset']?.toDouble() ?? 0.0,
      keepScrollOffset: props['keepScrollOffset'] ?? true,
      debugLabel: props['debugLabel'],
      parent: props['parent']),
  'ListConfig': (props) => ListConfig(
      itemBuilder: props['itemBuilder'],
      sourceList: props['sourceList'],
      showGlowLeading: props['showGlowLeading'] ?? true,
      showGlowTrailing: props['showGlowTrailing'] ?? true,
      indicatorBuilder: props['indicatorBuilder'],
      gridDelegate: props['gridDelegate'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'] ?? const EdgeInsets.all(0.0),
      itemExtent: props['itemExtent']?.toDouble(),
      itemCount: props['itemCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      semanticChildCount: props['semanticChildCount'],
      autoLoadMore: props['autoLoadMore'] ?? true,
      extendedListDelegate: props['extendedListDelegate'],
      lastChildLayoutType:
          props['lastChildLayoutType'] ?? LastChildLayoutType.foot,
      autoRefresh: props['autoRefresh'] ?? true,
      itemCountBuilder: props['itemCountBuilder'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      getActualIndex: props['getActualIndex']),
  'LoadState.completed': LoadState.completed,
  'LoadState.failed': LoadState.failed,
  'LoadState.loading': LoadState.loading,
  'LoadState.values': LoadState.values,
  'LoadingMoreCustomScrollView': (props) => LoadingMoreCustomScrollView(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      cacheExtent: props['cacheExtent']?.toDouble(),
      slivers: as<Widget>(props['slivers']) ?? const <Widget>[],
      semanticChildCount: props['semanticChildCount'],
      showGlowLeading: props['showGlowLeading'] ?? true,
      showGlowTrailing: props['showGlowTrailing'] ?? true,
      onScrollNotification: props['onScrollNotification'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      configs: as<SliverListConfig>(props['configs']),
      preloadExtent: props['preloadExtent']?.toDouble() ?? 0),
  'LoadingMoreList': (props) => LoadingMoreList(props['pa'][0],
      key: props['key'], onScrollNotification: props['onScrollNotification']),
  'LoadingMoreListConfig': (props) => LoadingMoreListConfig(
      props['pa'][0], props['pa'][1],
      indicatorBuilder: props['indicatorBuilder'],
      gridDelegate: props['gridDelegate'],
      autoLoadMore: props['autoLoadMore'] ?? true,
      extendedListDelegate: props['extendedListDelegate'],
      lastChildLayoutType:
          props['lastChildLayoutType'] ?? LastChildLayoutType.foot,
      autoRefresh: props['autoRefresh'] ?? true,
      childCount: props['childCount'],
      childCountBuilder: props['childCountBuilder'],
      getActualIndex: props['getActualIndex']),
  'LoadingMoreSliverList': (props) =>
      LoadingMoreSliverList(props['pa'][0], key: props['key']),
  'NeverScrollableClampingScrollPhysics': (props) =>
      const NeverScrollableClampingScrollPhysics(),
  'OKToast': (props) => OKToast(
      key: props['key'],
      child: props['child'],
      textStyle: props['textStyle'],
      radius: props['radius']?.toDouble() ?? 10.0,
      position: props['position'] ?? ToastPosition.center,
      textDirection: props['textDirection'] ?? TextDirection.ltr,
      dismissOtherOnShow: props['dismissOtherOnShow'] ?? false,
      movingOnWindowChange: props['movingOnWindowChange'] ?? true,
      backgroundColor: props['backgroundColor'],
      textPadding: props['textPadding'],
      textAlign: props['textAlign'],
      handleTouch: props['handleTouch'] ?? false,
      animationBuilder: props['animationBuilder'],
      animationDuration: props['animationDuration'] ?? _defaultAnimDuration,
      animationCurve: props['animationCurve'],
      duration: props['duration']),
  'OffsetAnimationBuilder': (props) => OffsetAnimationBuilder(
      maxOffsetX: props['maxOffsetX']?.toDouble() ?? 0,
      maxOffsetY: props['maxOffsetY']?.toDouble() ?? 100),
  'OpacityAnimationBuilder': (props) => const OpacityAnimationBuilder(),
  'OvershootCurve': (props) => OvershootCurve(
      (props['pa'].length > 0 ? props['pa'][0] : null)?.toDouble() ?? 2.5),
  'PullToRefreshContainer': (props) => PullToRefreshContainer(props['pa'][0]),
  'PullToRefreshCupertinoActivityIndicator': (props) =>
      PullToRefreshCupertinoActivityIndicator(
          key: props['key'],
          animating: props['animating'] ?? true,
          radius: props['radius']?.toDouble() ??
              PullToRefreshCupertinoActivityIndicator.defaultIndicatorRadius,
          activeColor: props['activeColor']),
  'PullToRefreshCupertinoActivityIndicator.defaultIndicatorRadius':
      PullToRefreshCupertinoActivityIndicator.defaultIndicatorRadius,
  'PullToRefreshIndicatorMode.armed': PullToRefreshIndicatorMode.armed,
  'PullToRefreshIndicatorMode.canceled': PullToRefreshIndicatorMode.canceled,
  'PullToRefreshIndicatorMode.done': PullToRefreshIndicatorMode.done,
  'PullToRefreshIndicatorMode.drag': PullToRefreshIndicatorMode.drag,
  'PullToRefreshIndicatorMode.error': PullToRefreshIndicatorMode.error,
  'PullToRefreshIndicatorMode.refresh': PullToRefreshIndicatorMode.refresh,
  'PullToRefreshIndicatorMode.snap': PullToRefreshIndicatorMode.snap,
  'PullToRefreshIndicatorMode.values': PullToRefreshIndicatorMode.values,
  'PullToRefreshNotification': (props) => PullToRefreshNotification(
      key: props['key'],
      child: props['child'],
      onRefresh: props['onRefresh'],
      color: props['color'],
      pullBackOnRefresh: props['pullBackOnRefresh'] ?? false,
      maxDragOffset: props['maxDragOffset']?.toDouble(),
      notificationPredicate:
          props['notificationPredicate'] ?? defaultNotificationPredicate,
      armedDragUpCancel: props['armedDragUpCancel'] ?? true,
      pullBackCurve: props['pullBackCurve'] ?? Curves.linear,
      reverse: props['reverse'] ?? false,
      pullBackOnError: props['pullBackOnError'] ?? false,
      pullBackDuration:
          props['pullBackDuration'] ?? const Duration(milliseconds: 400),
      refreshOffset: props['refreshOffset']?.toDouble(),
      reachToRefreshOffset: props['reachToRefreshOffset']?.toDouble()),
  'PullToRefreshScrollNotificationInfo': (props) =>
      PullToRefreshScrollNotificationInfo(props['pa'][0],
          props['pa'][1]?.toDouble(), props['pa'][2], props['pa'][3]),
  'RenderSliverWaterfallFlow': (props) => RenderSliverWaterfallFlow(
      childManager: props['childManager'], gridDelegate: props['gridDelegate']),
  'SizeCacheWidget': (props) => SizeCacheWidget(
      key: props['key'],
      child: props['child'],
      estimateCount: props['estimateCount'] ?? 0),
  'SizeCacheWidget.of': (props) => SizeCacheWidget.of(props['pa'][0]),
  'SlideAxis.both': SlideAxis.both,
  'SlideAxis.horizontal': SlideAxis.horizontal,
  'SlideAxis.values': SlideAxis.values,
  'SlideAxis.vertical': SlideAxis.vertical,
  'SlideType.onlyImage': SlideType.onlyImage,
  'SlideType.values': SlideType.values,
  'SlideType.wholePage': SlideType.wholePage,
  'SliverListConfig': (props) => SliverListConfig(
      itemBuilder: props['itemBuilder'],
      sourceList: props['sourceList'],
      indicatorBuilder: props['indicatorBuilder'],
      gridDelegate: props['gridDelegate'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      semanticIndexCallback:
          props['semanticIndexCallback'] ?? _kDefaultSemanticIndexCallback,
      semanticIndexOffset: props['semanticIndexOffset'] ?? 0,
      childCount: props['childCount'],
      autoLoadMore: props['autoLoadMore'] ?? true,
      extendedListDelegate: props['extendedListDelegate'],
      lastChildLayoutType:
          props['lastChildLayoutType'] ?? LastChildLayoutType.foot,
      padding: props['padding'],
      itemExtent: props['itemExtent']?.toDouble(),
      autoRefresh: props['autoRefresh'] ?? true,
      childCountBuilder: props['childCountBuilder'],
      getActualIndex: props['getActualIndex'],
      showNoMore: props['showNoMore'],
      lock: props['lock']),
  'SliverPinnedPersistentHeader': (props) =>
      SliverPinnedPersistentHeader(delegate: props['delegate']),
  'SliverPinnedPersistentHeaderRenderObjectWidget': (props) =>
      SliverPinnedPersistentHeaderRenderObjectWidget(props['pa'][0]),
  'SliverPinnedToBoxAdapter': (props) =>
      SliverPinnedToBoxAdapter(key: props['key'], child: props['child']),
  'SliverToNestedScrollBoxAdapter': (props) => SliverToNestedScrollBoxAdapter(
      key: props['key'],
      child: props['child'],
      childExtent: props['childExtent']?.toDouble() ?? 0,
      onScrollOffsetChanged: props['onScrollOffsetChanged']),
  'SliverWaterfallFlow': (props) => SliverWaterfallFlow(
      key: props['key'],
      delegate: props['delegate'],
      gridDelegate: props['gridDelegate']),
  'SliverWaterfallFlow.count': (props) => SliverWaterfallFlow.count(
      key: props['key'],
      crossAxisCount: props['crossAxisCount'],
      mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
      crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
      children: as<Widget>(props['children']) ?? const <Widget>[],
      lastChildLayoutTypeBuilder: props['lastChildLayoutTypeBuilder'],
      collectGarbage: props['collectGarbage'],
      viewportBuilder: props['viewportBuilder'],
      closeToTrailing: props['closeToTrailing'] ?? false),
  'SliverWaterfallFlow.extent': (props) => SliverWaterfallFlow.extent(
      key: props['key'],
      maxCrossAxisExtent: props['maxCrossAxisExtent']?.toDouble() ?? 0,
      mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
      crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
      children: as<Widget>(props['children']) ?? const <Widget>[],
      lastChildLayoutTypeBuilder: props['lastChildLayoutTypeBuilder'],
      collectGarbage: props['collectGarbage'],
      viewportBuilder: props['viewportBuilder'],
      closeToTrailing: props['closeToTrailing'] ?? false),
  'SliverWaterfallFlowDelegateWithFixedCrossAxisCount': (props) =>
      SliverWaterfallFlowDelegateWithFixedCrossAxisCount(
          crossAxisCount: props['crossAxisCount'],
          mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
          crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
          lastChildLayoutTypeBuilder: props['lastChildLayoutTypeBuilder'],
          collectGarbage: props['collectGarbage'],
          viewportBuilder: props['viewportBuilder'],
          closeToTrailing: props['closeToTrailing'] ?? false),
  'SliverWaterfallFlowDelegateWithMaxCrossAxisExtent': (props) =>
      SliverWaterfallFlowDelegateWithMaxCrossAxisExtent(
          maxCrossAxisExtent: props['maxCrossAxisExtent']?.toDouble() ?? 0,
          mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
          crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
          lastChildLayoutTypeBuilder: props['lastChildLayoutTypeBuilder'],
          collectGarbage: props['collectGarbage'],
          viewportBuilder: props['viewportBuilder'],
          closeToTrailing: props['closeToTrailing'] ?? false),
  'SliverWaterfallFlowParentData': (props) => SliverWaterfallFlowParentData(),
  'SourceCodeView': (props) => SourceCodeView(
      key: props['key'],
      filePath: props['filePath'],
      codeContent: props['codeContent'],
      codeLinkPrefix: props['codeLinkPrefix'],
      showLabelText: props['showLabelText'] ?? false,
      iconBackgroundColor: props['iconBackgroundColor'],
      iconForegroundColor: props['iconForegroundColor'],
      labelBackgroundColor: props['labelBackgroundColor'],
      labelTextStyle: props['labelTextStyle'],
      headerWidget: props['headerWidget'],
      footerWidget: props['footerWidget'],
      lightTheme: props['lightTheme'],
      darkTheme: props['darkTheme']),
  'SpecialTextSpan': (props) => SpecialTextSpan(
      style: props['style'],
      text: props['text'],
      actualText: props['actualText'],
      start: props['start'] ?? 0,
      deleteAll: props['deleteAll'] ?? true,
      recognizer: props['recognizer'],
      children: as<InlineSpan>(props['children']),
      semanticsLabel: props['semanticsLabel'],
      mouseCursor: props['mouseCursor'],
      onEnter: props['onEnter'],
      onExit: props['onExit']),
  'SyncScrollController': (props) => SyncScrollController(
      initialScrollOffset: props['initialScrollOffset']?.toDouble() ?? 0.0,
      keepScrollOffset: props['keepScrollOffset'] ?? true,
      debugLabel: props['debugLabel']),
  'SyncScrollHandler': (props) => SyncScrollHandler(),
  'SyntaxHighlighterStyle': (props) => SyntaxHighlighterStyle(
      baseStyle: props['baseStyle'],
      numberStyle: props['numberStyle'],
      commentStyle: props['commentStyle'],
      keywordStyle: props['keywordStyle'],
      stringStyle: props['stringStyle'],
      punctuationStyle: props['punctuationStyle'],
      classStyle: props['classStyle'],
      constantStyle: props['constantStyle']),
  'SyntaxHighlighterStyle.darkThemeStyle': (props) =>
      SyntaxHighlighterStyle.darkThemeStyle(),
  'SyntaxHighlighterStyle.lightThemeStyle': (props) =>
      SyntaxHighlighterStyle.lightThemeStyle(),
  'TaskEntry': (props) => TaskEntry(props['pa'][0], props['pa'][1],
      props['pa'][2], props['pa'][3], props['pa'][4],
      id: props['id']),
  'TextOverflowAlign.center': TextOverflowAlign.center,
  'TextOverflowAlign.left': TextOverflowAlign.left,
  'TextOverflowAlign.right': TextOverflowAlign.right,
  'TextOverflowAlign.values': TextOverflowAlign.values,
  'TextOverflowClearType.blendModeClear': TextOverflowClearType.blendModeClear,
  'TextOverflowClearType.clipRect': TextOverflowClearType.clipRect,
  'TextOverflowClearType.values': TextOverflowClearType.values,
  'TextOverflowPosition.end': TextOverflowPosition.end,
  'TextOverflowPosition.middle': TextOverflowPosition.middle,
  'TextOverflowPosition.start': TextOverflowPosition.start,
  'TextOverflowPosition.values': TextOverflowPosition.values,
  'TextOverflowWidget': (props) => TextOverflowWidget(
      child: props['child'],
      align: props['align'] ?? TextOverflowAlign.right,
      maxHeight: props['maxHeight']?.toDouble(),
      position: props['position'] ?? TextOverflowPosition.end,
      debugOverflowRectColor: props['debugOverflowRectColor'],
      clearType: props['clearType'] ?? TextOverflowClearType.blendModeClear),
  'TextPainterHelper': (props) => TextPainterHelper(),
  'ToastContainer': (props) => ToastContainer(
      key: props['key'],
      duration: props['duration'],
      child: props['child'],
      position: props['position'],
      animationBuilder: props['animationBuilder'],
      animationDuration: props['animationDuration'],
      animationCurve: props['animationCurve'],
      movingOnWindowChange: props['movingOnWindowChange'] ?? false),
  'ToastPosition': (props) => ToastPosition(
      align: props['align'] ?? Alignment.center,
      offset: props['offset']?.toDouble() ?? 0.0),
  'ToastPosition.bottom': ToastPosition.bottom,
  'ToastPosition.center': ToastPosition.center,
  'ToastPosition.top': ToastPosition.top,
  'ToastTheme': (props) => ToastTheme(
      key: props['key'],
      textStyle: props['textStyle'],
      textDirection: props['textDirection'],
      handleTouch: props['handleTouch'],
      radius: props['radius']?.toDouble() ?? 0,
      position: props['position'],
      child: props['child'],
      backgroundColor: props['backgroundColor'] ?? Colors.black,
      dismissOtherOnShow: props['dismissOtherOnShow'] ?? true,
      movingOnWindowChange: props['movingOnWindowChange'] ?? true,
      animationBuilder: props['animationBuilder'] ?? _defaultBuildAnimation,
      animationDuration: props['animationDuration'] ?? _defaultAnimDuration,
      animationCurve: props['animationCurve'] ?? Curves.easeIn,
      duration: props['duration'] ?? _defaultDuration,
      textPadding: props['textPadding'],
      textAlign: props['textAlign'],
      textMaxLines: props['textMaxLines'],
      textOverflow: props['textOverflow']),
  'ToastTheme.of': (props) => ToastTheme.of(props['pa'][0]),
  'WaterfallFlow': (props) => WaterfallFlow(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      gridDelegate: props['gridDelegate'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      children: as<Widget>(props['children']) ?? const <Widget>[],
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'WaterfallFlow.builder': (props) => WaterfallFlow.builder(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      gridDelegate: props['gridDelegate'],
      itemBuilder: props['itemBuilder'],
      itemCount: props['itemCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'WaterfallFlow.count': (props) => WaterfallFlow.count(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      crossAxisCount: props['crossAxisCount'],
      mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
      crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      children: as<Widget>(props['children']) ?? const <Widget>[],
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      lastChildLayoutTypeBuilder: props['lastChildLayoutTypeBuilder'],
      collectGarbage: props['collectGarbage'],
      viewportBuilder: props['viewportBuilder'],
      closeToTrailing: props['closeToTrailing'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'WaterfallFlow.custom': (props) => WaterfallFlow.custom(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      gridDelegate: props['gridDelegate'],
      childrenDelegate: props['childrenDelegate'],
      cacheExtent: props['cacheExtent']?.toDouble(),
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'WaterfallFlow.extent': (props) => WaterfallFlow.extent(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      maxCrossAxisExtent: props['maxCrossAxisExtent']?.toDouble() ?? 0,
      mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
      crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      children: as<Widget>(props['children']) ?? const <Widget>[],
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      lastChildLayoutTypeBuilder: props['lastChildLayoutTypeBuilder'],
      collectGarbage: props['collectGarbage'],
      viewportBuilder: props['viewportBuilder'],
      closeToTrailing: props['closeToTrailing'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'WidgetSpanSize': (props) => WidgetSpanSize(),
  'WidgetWithCodeView': (props) => WidgetWithCodeView(
      key: props['key'],
      filePath: props['filePath'],
      codeContent: props['codeContent'],
      child: props['child'],
      tabChangeListener: props['tabChangeListener'],
      codeLinkPrefix: props['codeLinkPrefix'],
      showLabelText: props['showLabelText'] ?? false,
      iconBackgroundColor: props['iconBackgroundColor'],
      iconForegroundColor: props['iconForegroundColor'],
      labelBackgroundColor: props['labelBackgroundColor'],
      labelTextStyle: props['labelTextStyle'],
      headerWidget: props['headerWidget'],
      footerWidget: props['footerWidget'],
      lightTheme: props['lightTheme'],
      darkTheme: props['darkTheme']),
};

/// packagesMapping
Map<String, bool> packagesMapping = {
  'ActionType.edit': false,
  'ActionType.pan': false,
  'ActionType.values': false,
  'ActionType.zoom': false,
  'AlwaysScrollableClampingScrollPhysics': false,
  'BackgroundTextSpan': false,
  'Boundary': false,
  'BubblesColor': false,
  'CarouselIndicator': true,
  'CircleColor': false,
  'ColorTabIndicator': false,
  'CountPostion.bottom': false,
  'CountPostion.left': false,
  'CountPostion.right': false,
  'CountPostion.top': false,
  'CountPostion.values': false,
  'CropAspectRatios': false,
  'CropAspectRatios.custom': false,
  'CropAspectRatios.original': false,
  'CropAspectRatios.ratio16_9': false,
  'CropAspectRatios.ratio1_1': false,
  'CropAspectRatios.ratio3_4': false,
  'CropAspectRatios.ratio4_3': false,
  'CropAspectRatios.ratio9_16': false,
  'DartSyntaxHighlighter': false,
  'DragHoldController': false,
  'EditActionDetails': false,
  'EditorConfig': false,
  'EditorCropLayerPainter': false,
  'EmptyWidget': true,
  'ExtendedAssetBundleImageKey': false,
  'ExtendedAssetImageProvider': false,
  'ExtendedExactAssetImageProvider': false,
  'ExtendedFileImageProvider': false,
  'ExtendedImage': true,
  'ExtendedImage.asset': true,
  'ExtendedImage.file': true,
  'ExtendedImage.globalStateWidgetBuilder': false,
  'ExtendedImage.memory': true,
  'ExtendedImage.network': true,
  'ExtendedImageBorderPainter': false,
  'ExtendedImageCropLayerPainter': false,
  'ExtendedImageEditor': true,
  'ExtendedImageGesture': true,
  'ExtendedImageGesturePageView': true,
  'ExtendedImageGesturePageView.builder': true,
  'ExtendedImageGesturePageView.custom': true,
  'ExtendedImageMode.editor': false,
  'ExtendedImageMode.gesture': false,
  'ExtendedImageMode.none': false,
  'ExtendedImageMode.values': false,
  'ExtendedImageSlidePage': true,
  'ExtendedImageSlidePageHandler': true,
  'ExtendedListDelegate': false,
  'ExtendedMemoryImageProvider': false,
  'ExtendedPageController': false,
  'ExtendedPageView': true,
  'ExtendedPageView.builder': true,
  'ExtendedPageView.custom': true,
  'ExtendedRawImage': true,
  'ExtendedRenderImage': false,
  'ExtendedRenderSliverFillViewport': false,
  'ExtendedResizeImage': false,
  'ExtendedResizeImage.resizeIfNeeded': false,
  'ExtendedRichText': true,
  'ExtendedScrollable': true,
  'ExtendedSliverAppbar': true,
  'ExtendedSliverFillViewport': true,
  'ExtendedTab': true,
  'ExtendedTabBar': true,
  'ExtendedTabBarView': true,
  'ExtendedText': true,
  'ExtendedText.rich': true,
  'ExtendedTextLibraryUtils.convertKeyboardMoveSelection': false,
  'ExtendedTextLibraryUtils.convertKeyboardMoveTextPostion': false,
  'ExtendedTextLibraryUtils.convertTextInputPostionToTextPainterPostion': false,
  'ExtendedTextLibraryUtils.convertTextInputSelectionToTextPainterSelection':
      false,
  'ExtendedTextLibraryUtils.convertTextPainterPostionToTextInputPostion': false,
  'ExtendedTextLibraryUtils.convertTextPainterSelectionToTextInputSelection':
      false,
  'ExtendedTextLibraryUtils.correctCaretOffset': false,
  'ExtendedTextLibraryUtils.getCaretOffset': false,
  'ExtendedTextLibraryUtils.getInlineOffset': false,
  'ExtendedTextLibraryUtils.handleSpecialTextSpanDelete': false,
  'ExtendedTextLibraryUtils.hasSpecialText': false,
  'ExtendedTextLibraryUtils.hasT': false,
  'ExtendedTextLibraryUtils.hitTestChild': false,
  'ExtendedTextLibraryUtils.joinChar': false,
  'ExtendedTextLibraryUtils.makeSureCaretNotInSpecialText': false,
  'ExtendedTextLibraryUtils.textSpanToActualText': false,
  'ExtendedTextLibraryUtils.zeroWidthSpace': false,
  'ExtendedUnderlineTabIndicator': false,
  'ExtendedWidgetSpan': false,
  'FixedOverscrollBouncingScrollPhysics': false,
  'FrameSeparateTaskQueue.instance': false,
  'FrameSeparateWidget': true,
  'GestureAnimation': false,
  'GestureConfig': false,
  'GestureDetails': false,
  'GesturePageView': true,
  'GesturePageView.builder': true,
  'GesturePageView.custom': true,
  'GlowNotificationWidget': true,
  'HighlightView': true,
  'ImageSpan': false,
  'IndicatorStatus.empty': false,
  'IndicatorStatus.error': false,
  'IndicatorStatus.fullScreenBusying': false,
  'IndicatorStatus.fullScreenError': false,
  'IndicatorStatus.loadingMoreBusying': false,
  'IndicatorStatus.noMoreLoad': false,
  'IndicatorStatus.none': false,
  'IndicatorStatus.values': false,
  'IndicatorWidget': true,
  'InitCropRectType.imageRect': false,
  'InitCropRectType.layoutRect': false,
  'InitCropRectType.values': false,
  'InitialAlignment.bottomCenter': false,
  'InitialAlignment.bottomLeft': false,
  'InitialAlignment.bottomRight': false,
  'InitialAlignment.center': false,
  'InitialAlignment.centerLeft': false,
  'InitialAlignment.centerRight': false,
  'InitialAlignment.topCenter': false,
  'InitialAlignment.topLeft': false,
  'InitialAlignment.topRight': false,
  'InitialAlignment.values': false,
  'InitialRenderSizeChangedWithCallback': false,
  'ItemSizeInfoNotifier': true,
  'LastChildLayoutType.foot': false,
  'LastChildLayoutType.fullCrossAxisExtent': false,
  'LastChildLayoutType.none': false,
  'LastChildLayoutType.values': false,
  'LayoutInfoNotification': false,
  'LessSpringClampingScrollPhysics': false,
  'LikeButton': true,
  'LikeCountAnimationType.all': false,
  'LikeCountAnimationType.none': false,
  'LikeCountAnimationType.part': false,
  'LikeCountAnimationType.values': false,
  'LikeCountClip': false,
  'LinkPageController': false,
  'LinkScrollController': false,
  'ListConfig': false,
  'LoadState.completed': false,
  'LoadState.failed': false,
  'LoadState.loading': false,
  'LoadState.values': false,
  'LoadingMoreCustomScrollView': true,
  'LoadingMoreList': true,
  'LoadingMoreListConfig': false,
  'LoadingMoreSliverList': true,
  'NeverScrollableClampingScrollPhysics': false,
  'OKToast': true,
  'OffsetAnimationBuilder': false,
  'OpacityAnimationBuilder': false,
  'OvershootCurve': false,
  'PullToRefreshContainer': true,
  'PullToRefreshCupertinoActivityIndicator': true,
  'PullToRefreshCupertinoActivityIndicator.defaultIndicatorRadius': false,
  'PullToRefreshIndicatorMode.armed': false,
  'PullToRefreshIndicatorMode.canceled': false,
  'PullToRefreshIndicatorMode.done': false,
  'PullToRefreshIndicatorMode.drag': false,
  'PullToRefreshIndicatorMode.error': false,
  'PullToRefreshIndicatorMode.refresh': false,
  'PullToRefreshIndicatorMode.snap': false,
  'PullToRefreshIndicatorMode.values': false,
  'PullToRefreshNotification': true,
  'PullToRefreshScrollNotificationInfo': false,
  'RenderSliverWaterfallFlow': false,
  'SizeCacheWidget': true,
  'SizeCacheWidget.of': false,
  'SlideAxis.both': false,
  'SlideAxis.horizontal': false,
  'SlideAxis.values': false,
  'SlideAxis.vertical': false,
  'SlideType.onlyImage': false,
  'SlideType.values': false,
  'SlideType.wholePage': false,
  'SliverListConfig': false,
  'SliverPinnedPersistentHeader': true,
  'SliverPinnedPersistentHeaderRenderObjectWidget': true,
  'SliverPinnedToBoxAdapter': true,
  'SliverToNestedScrollBoxAdapter': true,
  'SliverWaterfallFlow': true,
  'SliverWaterfallFlow.count': true,
  'SliverWaterfallFlow.extent': true,
  'SliverWaterfallFlowDelegateWithFixedCrossAxisCount': false,
  'SliverWaterfallFlowDelegateWithMaxCrossAxisExtent': false,
  'SliverWaterfallFlowParentData': false,
  'SourceCodeView': true,
  'SpecialTextSpan': false,
  'SyncScrollController': false,
  'SyncScrollHandler': false,
  'SyntaxHighlighterStyle': false,
  'SyntaxHighlighterStyle.darkThemeStyle': false,
  'SyntaxHighlighterStyle.lightThemeStyle': false,
  'TaskEntry': false,
  'TextOverflowAlign.center': false,
  'TextOverflowAlign.left': false,
  'TextOverflowAlign.right': false,
  'TextOverflowAlign.values': false,
  'TextOverflowClearType.blendModeClear': false,
  'TextOverflowClearType.clipRect': false,
  'TextOverflowClearType.values': false,
  'TextOverflowPosition.end': false,
  'TextOverflowPosition.middle': false,
  'TextOverflowPosition.start': false,
  'TextOverflowPosition.values': false,
  'TextOverflowWidget': true,
  'TextPainterHelper': false,
  'ToastContainer': true,
  'ToastPosition': false,
  'ToastPosition.bottom': false,
  'ToastPosition.center': false,
  'ToastPosition.top': false,
  'ToastTheme': true,
  'ToastTheme.of': true,
  'WaterfallFlow': true,
  'WaterfallFlow.builder': true,
  'WaterfallFlow.count': true,
  'WaterfallFlow.custom': true,
  'WaterfallFlow.extent': true,
  'WidgetSpanSize': false,
  'WidgetWithCodeView': true,
};
